/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VehiclesRouteImport } from './routes/vehicles'
import { Route as TripsRouteImport } from './routes/trips'
import { Route as SubscriptionsRouteImport } from './routes/subscriptions'
import { Route as StatsRouteImport } from './routes/stats'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as DebugRouteImport } from './routes/debug'
import { Route as CamsRouteImport } from './routes/cams'
import { Route as IndexRouteImport } from './routes/index'

const VehiclesRoute = VehiclesRouteImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => rootRouteImport,
} as any)
const TripsRoute = TripsRouteImport.update({
  id: '/trips',
  path: '/trips',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionsRoute = SubscriptionsRouteImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const StatsRoute = StatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugRoute = DebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRouteImport,
} as any)
const CamsRoute = CamsRouteImport.update({
  id: '/cams',
  path: '/cams',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cams': typeof CamsRoute
  '/debug': typeof DebugRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/trips': typeof TripsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cams': typeof CamsRoute
  '/debug': typeof DebugRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/trips': typeof TripsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cams': typeof CamsRoute
  '/debug': typeof DebugRoute
  '/profile': typeof ProfileRoute
  '/stats': typeof StatsRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/trips': typeof TripsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cams'
    | '/debug'
    | '/profile'
    | '/stats'
    | '/subscriptions'
    | '/trips'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cams'
    | '/debug'
    | '/profile'
    | '/stats'
    | '/subscriptions'
    | '/trips'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/cams'
    | '/debug'
    | '/profile'
    | '/stats'
    | '/subscriptions'
    | '/trips'
    | '/vehicles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CamsRoute: typeof CamsRoute
  DebugRoute: typeof DebugRoute
  ProfileRoute: typeof ProfileRoute
  StatsRoute: typeof StatsRoute
  SubscriptionsRoute: typeof SubscriptionsRoute
  TripsRoute: typeof TripsRoute
  VehiclesRoute: typeof VehiclesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vehicles': {
      id: '/vehicles'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof VehiclesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trips': {
      id: '/trips'
      path: '/trips'
      fullPath: '/trips'
      preLoaderRoute: typeof TripsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscriptions': {
      id: '/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof SubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cams': {
      id: '/cams'
      path: '/cams'
      fullPath: '/cams'
      preLoaderRoute: typeof CamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CamsRoute: CamsRoute,
  DebugRoute: DebugRoute,
  ProfileRoute: ProfileRoute,
  StatsRoute: StatsRoute,
  SubscriptionsRoute: SubscriptionsRoute,
  TripsRoute: TripsRoute,
  VehiclesRoute: VehiclesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
